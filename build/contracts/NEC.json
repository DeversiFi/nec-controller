{
  "contractName": "NEC",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "creationBlock",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalPledgedFees",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newController",
          "type": "address"
        }
      ],
      "name": "changeController",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "reducePledgedFees",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "burningEnabled",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "pledgeFees",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cloneTokenName",
          "type": "string"
        },
        {
          "name": "_cloneDecimalUnits",
          "type": "uint8"
        },
        {
          "name": "_cloneTokenSymbol",
          "type": "string"
        },
        {
          "name": "_snapshotBlock",
          "type": "uint256"
        },
        {
          "name": "_transfersEnabled",
          "type": "bool"
        }
      ],
      "name": "createCloneToken",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "balance",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "parentToken",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "generateTokens",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "transfersEnabled",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "parentSnapShotBlock",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "totalPledgedFeesAt",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        },
        {
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "approveAndCall",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "destroyTokens",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimTokens",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "tokenFactory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_transfersEnabled",
          "type": "bool"
        }
      ],
      "name": "enableTransfers",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_tokenFactory",
          "type": "address"
        },
        {
          "name": "efxVaultWallet",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Burned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_controller",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_cloneToken",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_snapshotBlock",
          "type": "uint256"
        }
      ],
      "name": "NewCloneToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_burningEnabled",
          "type": "bool"
        }
      ],
      "name": "enableBurning",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokensToBurn",
          "type": "uint256"
        }
      ],
      "name": "burnAndRetrieve",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPledgedFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reducePledgedFees\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burningEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensToBurn\",\"type\":\"uint256\"}],\"name\":\"burnAndRetrieve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"pledgeFees\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cloneTokenName\",\"type\":\"string\"},{\"name\":\"_cloneDecimalUnits\",\"type\":\"uint8\"},{\"name\":\"_cloneTokenSymbol\",\"type\":\"string\"},{\"name\":\"_snapshotBlock\",\"type\":\"uint256\"},{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"createCloneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burningEnabled\",\"type\":\"bool\"}],\"name\":\"enableBurning\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentSnapShotBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalPledgedFeesAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"name\":\"efxVaultWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cloneToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"NewCloneToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"This function makes it easy to read the `allowed[]` map\",\"params\":{\"_owner\":\"The address of the account that owns the token\",\"_spender\":\"The address of the account able to transfer the tokens\"},\"return\":\"Amount of remaining tokens of _owner that _spender is allowed  to spend\"},\"approve(address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to be approved for transfer\",\"_spender\":\"The address of the account able to transfer the tokens\"},\"return\":\"True if the approval was successful\"},\"approveAndCall(address,uint256,bytes)\":{\"params\":{\"_amount\":\"The amount of tokens to be approved for transfer\",\"_spender\":\"The address of the contract able to transfer the tokens\"},\"return\":\"True if the function call was successful\"},\"balanceOf(address)\":{\"params\":{\"_owner\":\"The address that's balance is being requested\"},\"return\":\"The balance of `_owner` at the current block\"},\"balanceOfAt(address,uint256)\":{\"details\":\"Queries the balance of `_owner` at a specific `_blockNumber`\",\"params\":{\"_blockNumber\":\"The block number when the balance is queried\",\"_owner\":\"The address from which the balance will be retrieved\"},\"return\":\"The balance at `_blockNumber`\"},\"changeController(address)\":{\"params\":{\"_newController\":\"The new controller of the contract\"}},\"claimTokens(address)\":{\"params\":{\"_token\":\"The address of the token contract that you want to recover  set to 0 in case you want to extract ether.\"}},\"createCloneToken(string,uint8,string,uint256,bool)\":{\"params\":{\"_cloneDecimalUnits\":\"Number of decimals of the smallest unit\",\"_cloneTokenName\":\"Name of the clone token\",\"_cloneTokenSymbol\":\"Symbol of the clone token\",\"_snapshotBlock\":\"Block when the distribution of the parent token is  copied to set the initial distribution of the new clone token;  if the block is zero than the actual block, the current block is used\",\"_transfersEnabled\":\"True if transfers are allowed in the clone\"},\"return\":\"The address of the new MiniMeToken Contract\"},\"destroyTokens(address,uint256)\":{\"params\":{\"_amount\":\"The quantity of tokens to burn\",\"_owner\":\"The address that will lose the tokens\"},\"return\":\"True if the tokens are burned correctly\"},\"enableTransfers(bool)\":{\"params\":{\"_transfersEnabled\":\"True if transfers are allowed in the clone\"}},\"generateTokens(address,uint256)\":{\"params\":{\"_amount\":\"The quantity of tokens generated\",\"_owner\":\"The address that will be assigned the new tokens\"},\"return\":\"True if the tokens are generated correctly\"},\"pledgeFees(uint256)\":{\"params\":{\"_value\":\"The amount sent to the vault by controller, reserved for token holders\"}},\"reducePledgedFees(uint256)\":{\"params\":{\"_value\":\"The amount of pledged fees which are being distributed to token holders, reducing liability\"}},\"totalPledgedFees()\":{\"details\":\"This function makes it easy to get the total pledged fees\",\"return\":\"The total number of fees belonging to token holders\"},\"totalPledgedFeesAt(uint256)\":{\"params\":{\"_blockNumber\":\"The block number when the totalPledgedFees is queried\"},\"return\":\"The total amount of pledged fees at `_blockNumber`\"},\"totalSupply()\":{\"details\":\"This function makes it easy to get the total number of tokens\",\"return\":\"The total number of tokens\"},\"totalSupplyAt(uint256)\":{\"params\":{\"_blockNumber\":\"The block number when the totalSupply is queried\"},\"return\":\"The total amount of tokens at `_blockNumber`\"},\"transfer(address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to be transferred\",\"_to\":\"The address of the recipient\"},\"return\":\"Whether the transfer was successful or not\"},\"transferFrom(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to be transferred\",\"_from\":\"The address holding the tokens being transferred\",\"_to\":\"The address of the recipient\"},\"return\":\"True if the transfer was successful\"}}},\"userdoc\":{\"methods\":{\"approve(address,uint256)\":{\"notice\":\"`msg.sender` approves `_spender` to spend `_amount` tokens on  its behalf. This is a modified version of the ERC20 approve function  to be a little bit safer\"},\"approveAndCall(address,uint256,bytes)\":{\"notice\":\"`msg.sender` approves `_spender` to send `_amount` tokens on  its behalf, and then a function is triggered in the contract that is  being approved, `_spender`. This allows users to use their tokens to  interact with contracts in one function call instead of two\"},\"balanceOfAt(address,uint256)\":{\"notice\":\"/////////////\"},\"changeController(address)\":{\"notice\":\"Changes the controller of the contract\"},\"claimTokens(address)\":{\"notice\":\"///////This method can be used by the controller to extract mistakenly  sent tokens to this contract.\"},\"createCloneToken(string,uint8,string,uint256,bool)\":{\"notice\":\"/////////////Creates a new clone token with the initial distribution being  this token at `_snapshotBlock`\"},\"destroyTokens(address,uint256)\":{\"notice\":\"Burns `_amount` tokens from `_owner`\"},\"enableBurning(bool)\":{\"notice\":\"/////////////\"},\"enableTransfers(bool)\":{\"notice\":\"/////////////Enables token holders to transfer their tokens freely if true\"},\"generateTokens(address,uint256)\":{\"notice\":\"/////////////Generates `_amount` tokens that are assigned to `_owner`\"},\"pledgeFees(uint256)\":{\"notice\":\"/////////////Pledges fees to the token holders, later to be claimed by burning\"},\"reducePledgedFees(uint256)\":{\"notice\":\"Reduces pledged fees to the token holders, i.e. during upgrade or token burning\"},\"totalPledgedFees()\":{\"notice\":\"/////////////\"},\"totalPledgedFeesAt(uint256)\":{\"notice\":\"Total amount of fees at a specific `_blockNumber`.\"},\"totalSupplyAt(uint256)\":{\"notice\":\"Total amount of tokens at a specific `_blockNumber`.\"},\"transfer(address,uint256)\":{\"notice\":\"Send `_amount` tokens to `_to` from `msg.sender`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Send `_amount` tokens to `_to` from `_from` on the condition it  is approved by `_from`\"}}}},\"settings\":{\"compilationTarget\":{\"/Users/willharborne/Desktop/EFX/repos/nec-controller/contracts/NEC.sol\":\"NEC\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/willharborne/Desktop/EFX/repos/nec-controller/contracts/MiniMeToken.sol\":{\"keccak256\":\"0x31334b66b055d4bca31e59912a6e8cab45fe7d023d1bc126d722517821d03111\",\"urls\":[\"bzzr://76ed4a35c058345a4b39b16b4a3918905d2971edd131c24c7739e100301cdbc3\"]},\"/Users/willharborne/Desktop/EFX/repos/nec-controller/contracts/NEC.sol\":{\"keccak256\":\"0xa9c96c0ff0757e94e2603ac45715badd174481345357ecf9a764947422f18cce\",\"urls\":[\"bzzr://ec86fe8df2ea74d7f21f37d75f02834fb31e6a5bb10483d132ab3ab1dbd51e90\"]}},\"version\":1}",
  "bytecode": "0x60806040526040805190810160405280600781526020017f4546585f302e3100000000000000000000000000000000000000000000000000815250600490805190602001906200005192919062000d60565b503480156200005f57600080fd5b5060405160408062004520833981018060405260408110156200008157600080fd5b810190808051906020019092919080519060200190929190505050816000806040805190810160405280601581526020017f45746866696e6578204e656374617220546f6b656e000000000000000000000081525060126040805190810160405280600381526020017f4e454300000000000000000000000000000000000000000000000000000000008152506001336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360019080519060200190620001a992919062000d60565b5082600260006101000a81548160ff021916908360ff1602179055508160039080519060200190620001dd92919062000d60565b5085600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460068190555080600b60006101000a81548160ff021916908315150217905550436007819055505050505050505062000275816b033b2e3c9fd0803ce800000062000299640100000000026401000000009004565b5062000291600062000441640100000000026401000000009004565b505062000ea6565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620002f757600080fd5b600062000312620004ba640100000000026401000000009004565b905080838201101515156200032657600080fd5b60006200034285620004db640100000000026401000000009004565b905080848201101515156200035657600080fd5b62000374600a858401620004ff640100000000026401000000009004565b620003cf600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020858301620004ff640100000000026401000000009004565b8473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200049d57600080fd5b80600d60146101000a81548160ff02191690831515021790555050565b6000620004d6436200067c640100000000026401000000009004565b905090565b6000620004f882436200085b640100000000026401000000009004565b9050919050565b600082805490501480620005635750438260018480549050038154811015156200052557fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16105b15620006175760008283805480919060010162000581919062000de7565b8154811015156200058e57fe5b906000526020600020019050438160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550818160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505062000678565b60008260018480549050038154811015156200062f57fe5b906000526020600020019050818160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550505b5050565b600080600a805490501480620006dd575081600a60008154811015156200069f57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b156200083757600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156200082d57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663981b24d0620007978460065462000b26640100000000026401000000009004565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015620007e857600080fd5b505afa158015620007fd573d6000803e3d6000fd5b505050506040513d60208110156200081457600080fd5b8101908080519060200190929190505050905062000856565b6000905062000856565b62000853600a8362000b41640100000000026401000000009004565b90505b919050565b600080600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050148062000936575081600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815481101515620008f857fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b1562000ac457600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151562000aba57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ee2cd7e84620009f18560065462000b26640100000000026401000000009004565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801562000a7557600080fd5b505afa15801562000a8a573d6000803e3d6000fd5b505050506040513d602081101562000aa157600080fd5b8101908080519060200190929190505050905062000b20565b6000905062000b20565b62000b1d600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208362000b41640100000000026401000000009004565b90505b92915050565b600081831062000b37578162000b39565b825b905092915050565b6000808380549050141562000b5a576000905062000d5a565b82600184805490500381548110151562000b7057fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168210151562000c0f5782600184805490500381548110151562000bcb57fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905062000d5a565b82600081548110151562000c1f57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1682101562000c6d576000905062000d5a565b60008090506000600185805490500390505b8181111562000d0a576000600260018484010181151562000c9c57fe5b04905084868281548110151562000caf57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1611151562000cfc5780925062000d03565b6001810391505b5062000c7f565b848281548110151562000d1957fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16925050505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000da357805160ff191683800117855562000dd4565b8280016001018555821562000dd4579182015b8281111562000dd357825182559160200191906001019062000db6565b5b50905062000de3919062000e16565b5090565b81548183558181111562000e115781836000526020600020918201910162000e10919062000e3e565b5b505050565b62000e3b91905b8082111562000e3757600081600090555060010162000e1d565b5090565b90565b62000ea391905b8082111562000e9f57600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff02191690555060010162000e45565b5090565b90565b61366a8062000eb66000396000f3fe608060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146102d0578063095ea7b31461036057806317634514146103d357806318160ddd146103fe57806323b872dd14610429578063311325bd146104bc578063313ce567146104e75780633cebb82314610518578063486575a5146105695780634d754715146105bc5780634ee2cd7e146105eb5780634f37edfd1461065a5780634fa7e353146106ad57806354fd4d50146107005780636638c0871461079057806370a082311461095257806380a54001146109b7578063827f32c014610a0e57806395d89b4114610a81578063981b24d014610b11578063a9059cbb14610b60578063b45dd87314610bd3578063bef97c8714610c10578063c5bcc4f114610c3f578063c6d1d23d14610c6a578063cae9ca5114610cb9578063d3ce77fe14610dc3578063dd62ed3e14610e36578063df8de3e714610ebb578063e77772fe14610f0c578063f41e60c514610f63578063f77c479114610fa0575b6101c06000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ff7565b15156101cb57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f48c305434336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506020604051808303818588803b15801561028757600080fd5b505af115801561029b573d6000803e3d6000fd5b50505050506040513d60208110156102b257600080fd5b810190808051906020019092919050505015156102ce57600080fd5b005b3480156102dc57600080fd5b506102e561104a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561032557808201518184015260208101905061030a565b50505050905090810190601f1680156103525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036c57600080fd5b506103b96004803603604081101561038357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110e8565b604051808215151515815260200191505060405180910390f35b3480156103df57600080fd5b506103e86113f9565b6040518082815260200191505060405180910390f35b34801561040a57600080fd5b506104136113ff565b6040518082815260200191505060405180910390f35b34801561043557600080fd5b506104a26004803603606081101561044c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061140f565b604051808215151515815260200191505060405180910390f35b3480156104c857600080fd5b506104d1611653565b6040518082815260200191505060405180910390f35b3480156104f357600080fd5b506104fc611663565b604051808260ff1660ff16815260200191505060405180910390f35b34801561052457600080fd5b506105676004803603602081101561053b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611676565b005b34801561057557600080fd5b506105a26004803603602081101561058c57600080fd5b8101908080359060200190929190505050611714565b604051808215151515815260200191505060405180910390f35b3480156105c857600080fd5b506105d16117a3565b604051808215151515815260200191505060405180910390f35b3480156105f757600080fd5b506106446004803603604081101561060e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117b6565b6040518082815260200191505060405180910390f35b34801561066657600080fd5b506106936004803603602081101561067d57600080fd5b8101908080359060200190929190505050611a56565b604051808215151515815260200191505060405180910390f35b3480156106b957600080fd5b506106e6600480360360208110156106d057600080fd5b8101908080359060200190929190505050611c26565b604051808215151515815260200191505060405180910390f35b34801561070c57600080fd5b50610715611cb7565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561075557808201518184015260208101905061073a565b50505050905090810190601f1680156107825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561079c57600080fd5b50610910600480360360a08110156107b357600080fd5b81019080803590602001906401000000008111156107d057600080fd5b8201836020820111156107e257600080fd5b8035906020019184600183028401116401000000008311171561080457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff1690602001909291908035906020019064010000000081111561087457600080fd5b82018360208201111561088657600080fd5b803590602001918460018302840111640100000000831117156108a857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803515159060200190929190505050611d55565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561095e57600080fd5b506109a16004803603602081101561097557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612069565b6040518082815260200191505060405180910390f35b3480156109c357600080fd5b506109cc61207c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a1a57600080fd5b50610a6760048036036040811015610a3157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506120a2565b604051808215151515815260200191505060405180910390f35b348015610a8d57600080fd5b50610a96612203565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610ad6578082015181840152602081019050610abb565b50505050905090810190601f168015610b035780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b1d57600080fd5b50610b4a60048036036020811015610b3457600080fd5b81019080803590602001909291905050506122a1565b6040518082815260200191505060405180910390f35b348015610b6c57600080fd5b50610bb960048036036040811015610b8357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612455565b604051808215151515815260200191505060405180910390f35b348015610bdf57600080fd5b50610c0e60048036036020811015610bf657600080fd5b81019080803515159060200190929190505050612487565b005b348015610c1c57600080fd5b50610c256124ff565b604051808215151515815260200191505060405180910390f35b348015610c4b57600080fd5b50610c54612512565b6040518082815260200191505060405180910390f35b348015610c7657600080fd5b50610ca360048036036020811015610c8d57600080fd5b8101908080359060200190929190505050612518565b6040518082815260200191505060405180910390f35b348015610cc557600080fd5b50610da960048036036060811015610cdc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610d2357600080fd5b820183602082011115610d3557600080fd5b80359060200191846001830284011164010000000083111715610d5757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506126cc565b604051808215151515815260200191505060405180910390f35b348015610dcf57600080fd5b50610e1c60048036036040811015610de657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061284a565b604051808215151515815260200191505060405180910390f35b348015610e4257600080fd5b50610ea560048036036040811015610e5957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506129a7565b6040518082815260200191505060405180910390f35b348015610ec757600080fd5b50610f0a60048036036020811015610ede57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a2e565b005b348015610f1857600080fd5b50610f21612dab565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610f6f57600080fd5b50610f9e60048036036020811015610f8657600080fd5b81019080803515159060200190929190505050612dd1565b005b348015610fac57600080fd5b50610fb5612e49565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611039576000915050611045565b823b9050600081119150505b919050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110e05780601f106110b5576101008083540402835291602001916110e0565b820191906000526020600020905b8154815290600101906020018083116110c357829003601f168201915b505050505081565b6000600b60009054906101000a900460ff16151561110557600080fd5b600082148061119057506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561119b57600080fd5b6111c56000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ff7565b15611309576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da682aeb3385856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156112c257600080fd5b505af11580156112d6573d6000803e3d6000fd5b505050506040513d60208110156112ec57600080fd5b8101908080519060200190929190505050151561130857600080fd5b5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60075481565b600061140a436122a1565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561163d57600b60009054906101000a900460ff16151561148257600080fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561163c5781600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156115b157600080fd5b81600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b5b611648848484612e6e565b600190509392505050565b600061165e43612518565b905090565b600260009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116d157600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561177157600080fd5b600061177b611653565b905082811015151561178c57600080fd5b611799600c848303613210565b6001915050919050565b600d60149054906101000a900460ff1681565b600080600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050148061188f575081600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548110151561185157fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b15611a0557600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156119fc57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ee2cd7e8461193785600654613385565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b1580156119ba57600080fd5b505afa1580156119ce573d6000803e3d6000fd5b505050506040513d60208110156119e457600080fd5b81019080805190602001909291905050509050611a50565b60009050611a50565b611a4d600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208361339e565b90505b92915050565b6000600d60149054906101000a900460ff161515611a7357600080fd5b6000611a7f33436117b6565b905082811015611a93576000915050611c21565b611abd6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ff7565b15611bcd576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166345a1b92c33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611b8657600080fd5b505af1158015611b9a573d6000803e3d6000fd5b505050506040513d6020811015611bb057600080fd5b81019080805190602001909291905050501515611bcc57600080fd5b5b3373ffffffffffffffffffffffffffffffffffffffff167f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df7846040518082815260200191505060405180910390a260019150505b919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c8357600080fd5b6000611c8d611653565b90508083820110151515611ca057600080fd5b611cad600c848301613210565b6001915050919050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d4d5780601f10611d2257610100808354040283529160200191611d4d565b820191906000526020600020905b815481529060010190602001808311611d3057829003601f168201915b505050505081565b600080831415611d63574392505b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b7b72c130868a8a8a896040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001868152602001806020018560ff1660ff1681526020018060200184151515158152602001838103835287818151815260200191508051906020019080838360005b83811015611e66578082015181840152602081019050611e4b565b50505050905090810190601f168015611e935780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015611ecc578082015181840152602081019050611eb1565b50505050905090810190601f168015611ef95780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b158015611f1e57600080fd5b505af1158015611f32573d6000803e3d6000fd5b505050506040513d6020811015611f4857600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16633cebb823336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611ff657600080fd5b505af115801561200a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff167f086c875b377f900b07ce03575813022f05dd10ed7640b5282cf6d3c3fc352ade856040518082815260200191505060405180910390a28091505095945050505050565b600061207582436117b6565b9050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120ff57600080fd5b60006121096113ff565b9050808382011015151561211c57600080fd5b600061212785612069565b9050808482011015151561213a57600080fd5b612147600a858401613210565b612191600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020858301613210565b8473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122995780601f1061226e57610100808354040283529160200191612299565b820191906000526020600020905b81548152906001019060200180831161227c57829003601f168201915b505050505081565b600080600a805490501480612300575081600a60008154811015156122c257fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b1561244257600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561243957600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663981b24d06123a784600654613385565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156123f757600080fd5b505afa15801561240b573d6000803e3d6000fd5b505050506040513d602081101561242157600080fd5b81019080805190602001909291905050509050612450565b60009050612450565b61244d600a8361339e565b90505b919050565b6000600b60009054906101000a900460ff16151561247257600080fd5b61247d338484612e6e565b6001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156124e257600080fd5b80600d60146101000a81548160ff02191690831515021790555050565b600b60009054906101000a900460ff1681565b60065481565b600080600c805490501480612577575081600c600081548110151561253957fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b156126b957600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156126b057600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c6d1d23d61261e84600654613385565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561266e57600080fd5b505afa158015612682573d6000803e3d6000fd5b505050506040513d602081101561269857600080fd5b810190808051906020019092919050505090506126c7565b600090506126c7565b6126c4600c8361339e565b90505b919050565b60006126d884846110e8565b15156126e357600080fd5b8373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156127d85780820151818401526020810190506127bd565b50505050905090810190601f1680156128055780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561282757600080fd5b505af115801561283b573d6000803e3d6000fd5b50505050600190509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128a757600080fd5b60006128b16113ff565b90508281101515156128c257600080fd5b60006128cd85612069565b90508381101515156128de57600080fd5b6128eb600a858403613210565b612935600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020858303613210565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612a8957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612b42576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015612b3c573d6000803e3d6000fd5b50612da8565b600081905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612be257600080fd5b505afa158015612bf6573d6000803e3d6000fd5b505050506040513d6020811015612c0c57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612ce357600080fd5b505af1158015612cf7573d6000803e3d6000fd5b505050506040513d6020811015612d0d57600080fd5b8101908080519060200190929190505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c836040518082815260200191505060405180910390a350505b50565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e2c57600080fd5b80600b60006101000a81548160ff02191690831515021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000811415612ee1578173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a361320b565b43600654101515612ef157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015612f5a57503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1515612f6557600080fd5b6000612f7184436117b6565b9050818110151515612f8257600080fd5b612fac6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ff7565b156130f0576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a3931498585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156130a957600080fd5b505af11580156130bd573d6000803e3d6000fd5b505050506040513d60208110156130d357600080fd5b810190808051906020019092919050505015156130ef57600080fd5b5b61313a600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838303613210565b600061314684436117b6565b9050808382011015151561315957600080fd5b6131a3600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848301613210565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a350505b505050565b60008280549050148061327257504382600184805490500381548110151561323457fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16105b156133215760008283805480919060010161328d91906135ad565b81548110151561329957fe5b906000526020600020019050438160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550818160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050613381565b600082600184805490500381548110151561333857fe5b906000526020600020019050818160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550505b5050565b60008183106133945781613396565b825b905092915050565b600080838054905014156133b557600090506135a7565b8260018480549050038154811015156133ca57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16821015156134665782600184805490500381548110151561342357fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1690506135a7565b82600081548110151561347557fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168210156134c157600090506135a7565b60008090506000600185805490500390505b8181111561355857600060026001848401018115156134ee57fe5b04905084868281548110151561350057fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1611151561354b57809250613552565b6001810391505b506134d3565b848281548110151561356657fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16925050505b92915050565b8154818355818111156135d4578183600052602060002091820191016135d391906135d9565b5b505050565b61363b91905b8082111561363757600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff0219169055506001016135df565b5090565b9056fea165627a7a72305820f40cf4658615fc5a5af9257a6debed8b30a981f06e6762263321fb6aada9f7a40029",
  "deployedBytecode": "0x608060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146102d0578063095ea7b31461036057806317634514146103d357806318160ddd146103fe57806323b872dd14610429578063311325bd146104bc578063313ce567146104e75780633cebb82314610518578063486575a5146105695780634d754715146105bc5780634ee2cd7e146105eb5780634f37edfd1461065a5780634fa7e353146106ad57806354fd4d50146107005780636638c0871461079057806370a082311461095257806380a54001146109b7578063827f32c014610a0e57806395d89b4114610a81578063981b24d014610b11578063a9059cbb14610b60578063b45dd87314610bd3578063bef97c8714610c10578063c5bcc4f114610c3f578063c6d1d23d14610c6a578063cae9ca5114610cb9578063d3ce77fe14610dc3578063dd62ed3e14610e36578063df8de3e714610ebb578063e77772fe14610f0c578063f41e60c514610f63578063f77c479114610fa0575b6101c06000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ff7565b15156101cb57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f48c305434336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506020604051808303818588803b15801561028757600080fd5b505af115801561029b573d6000803e3d6000fd5b50505050506040513d60208110156102b257600080fd5b810190808051906020019092919050505015156102ce57600080fd5b005b3480156102dc57600080fd5b506102e561104a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561032557808201518184015260208101905061030a565b50505050905090810190601f1680156103525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036c57600080fd5b506103b96004803603604081101561038357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110e8565b604051808215151515815260200191505060405180910390f35b3480156103df57600080fd5b506103e86113f9565b6040518082815260200191505060405180910390f35b34801561040a57600080fd5b506104136113ff565b6040518082815260200191505060405180910390f35b34801561043557600080fd5b506104a26004803603606081101561044c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061140f565b604051808215151515815260200191505060405180910390f35b3480156104c857600080fd5b506104d1611653565b6040518082815260200191505060405180910390f35b3480156104f357600080fd5b506104fc611663565b604051808260ff1660ff16815260200191505060405180910390f35b34801561052457600080fd5b506105676004803603602081101561053b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611676565b005b34801561057557600080fd5b506105a26004803603602081101561058c57600080fd5b8101908080359060200190929190505050611714565b604051808215151515815260200191505060405180910390f35b3480156105c857600080fd5b506105d16117a3565b604051808215151515815260200191505060405180910390f35b3480156105f757600080fd5b506106446004803603604081101561060e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117b6565b6040518082815260200191505060405180910390f35b34801561066657600080fd5b506106936004803603602081101561067d57600080fd5b8101908080359060200190929190505050611a56565b604051808215151515815260200191505060405180910390f35b3480156106b957600080fd5b506106e6600480360360208110156106d057600080fd5b8101908080359060200190929190505050611c26565b604051808215151515815260200191505060405180910390f35b34801561070c57600080fd5b50610715611cb7565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561075557808201518184015260208101905061073a565b50505050905090810190601f1680156107825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561079c57600080fd5b50610910600480360360a08110156107b357600080fd5b81019080803590602001906401000000008111156107d057600080fd5b8201836020820111156107e257600080fd5b8035906020019184600183028401116401000000008311171561080457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff1690602001909291908035906020019064010000000081111561087457600080fd5b82018360208201111561088657600080fd5b803590602001918460018302840111640100000000831117156108a857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803515159060200190929190505050611d55565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561095e57600080fd5b506109a16004803603602081101561097557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612069565b6040518082815260200191505060405180910390f35b3480156109c357600080fd5b506109cc61207c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a1a57600080fd5b50610a6760048036036040811015610a3157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506120a2565b604051808215151515815260200191505060405180910390f35b348015610a8d57600080fd5b50610a96612203565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610ad6578082015181840152602081019050610abb565b50505050905090810190601f168015610b035780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b1d57600080fd5b50610b4a60048036036020811015610b3457600080fd5b81019080803590602001909291905050506122a1565b6040518082815260200191505060405180910390f35b348015610b6c57600080fd5b50610bb960048036036040811015610b8357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612455565b604051808215151515815260200191505060405180910390f35b348015610bdf57600080fd5b50610c0e60048036036020811015610bf657600080fd5b81019080803515159060200190929190505050612487565b005b348015610c1c57600080fd5b50610c256124ff565b604051808215151515815260200191505060405180910390f35b348015610c4b57600080fd5b50610c54612512565b6040518082815260200191505060405180910390f35b348015610c7657600080fd5b50610ca360048036036020811015610c8d57600080fd5b8101908080359060200190929190505050612518565b6040518082815260200191505060405180910390f35b348015610cc557600080fd5b50610da960048036036060811015610cdc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610d2357600080fd5b820183602082011115610d3557600080fd5b80359060200191846001830284011164010000000083111715610d5757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506126cc565b604051808215151515815260200191505060405180910390f35b348015610dcf57600080fd5b50610e1c60048036036040811015610de657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061284a565b604051808215151515815260200191505060405180910390f35b348015610e4257600080fd5b50610ea560048036036040811015610e5957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506129a7565b6040518082815260200191505060405180910390f35b348015610ec757600080fd5b50610f0a60048036036020811015610ede57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a2e565b005b348015610f1857600080fd5b50610f21612dab565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610f6f57600080fd5b50610f9e60048036036020811015610f8657600080fd5b81019080803515159060200190929190505050612dd1565b005b348015610fac57600080fd5b50610fb5612e49565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611039576000915050611045565b823b9050600081119150505b919050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110e05780601f106110b5576101008083540402835291602001916110e0565b820191906000526020600020905b8154815290600101906020018083116110c357829003601f168201915b505050505081565b6000600b60009054906101000a900460ff16151561110557600080fd5b600082148061119057506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561119b57600080fd5b6111c56000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ff7565b15611309576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da682aeb3385856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156112c257600080fd5b505af11580156112d6573d6000803e3d6000fd5b505050506040513d60208110156112ec57600080fd5b8101908080519060200190929190505050151561130857600080fd5b5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60075481565b600061140a436122a1565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561163d57600b60009054906101000a900460ff16151561148257600080fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561163c5781600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156115b157600080fd5b81600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b5b611648848484612e6e565b600190509392505050565b600061165e43612518565b905090565b600260009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116d157600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561177157600080fd5b600061177b611653565b905082811015151561178c57600080fd5b611799600c848303613210565b6001915050919050565b600d60149054906101000a900460ff1681565b600080600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050148061188f575081600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548110151561185157fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b15611a0557600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156119fc57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ee2cd7e8461193785600654613385565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b1580156119ba57600080fd5b505afa1580156119ce573d6000803e3d6000fd5b505050506040513d60208110156119e457600080fd5b81019080805190602001909291905050509050611a50565b60009050611a50565b611a4d600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208361339e565b90505b92915050565b6000600d60149054906101000a900460ff161515611a7357600080fd5b6000611a7f33436117b6565b905082811015611a93576000915050611c21565b611abd6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ff7565b15611bcd576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166345a1b92c33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611b8657600080fd5b505af1158015611b9a573d6000803e3d6000fd5b505050506040513d6020811015611bb057600080fd5b81019080805190602001909291905050501515611bcc57600080fd5b5b3373ffffffffffffffffffffffffffffffffffffffff167f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df7846040518082815260200191505060405180910390a260019150505b919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c8357600080fd5b6000611c8d611653565b90508083820110151515611ca057600080fd5b611cad600c848301613210565b6001915050919050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d4d5780601f10611d2257610100808354040283529160200191611d4d565b820191906000526020600020905b815481529060010190602001808311611d3057829003601f168201915b505050505081565b600080831415611d63574392505b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b7b72c130868a8a8a896040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001868152602001806020018560ff1660ff1681526020018060200184151515158152602001838103835287818151815260200191508051906020019080838360005b83811015611e66578082015181840152602081019050611e4b565b50505050905090810190601f168015611e935780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015611ecc578082015181840152602081019050611eb1565b50505050905090810190601f168015611ef95780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b158015611f1e57600080fd5b505af1158015611f32573d6000803e3d6000fd5b505050506040513d6020811015611f4857600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16633cebb823336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611ff657600080fd5b505af115801561200a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff167f086c875b377f900b07ce03575813022f05dd10ed7640b5282cf6d3c3fc352ade856040518082815260200191505060405180910390a28091505095945050505050565b600061207582436117b6565b9050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120ff57600080fd5b60006121096113ff565b9050808382011015151561211c57600080fd5b600061212785612069565b9050808482011015151561213a57600080fd5b612147600a858401613210565b612191600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020858301613210565b8473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122995780601f1061226e57610100808354040283529160200191612299565b820191906000526020600020905b81548152906001019060200180831161227c57829003601f168201915b505050505081565b600080600a805490501480612300575081600a60008154811015156122c257fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b1561244257600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561243957600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663981b24d06123a784600654613385565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156123f757600080fd5b505afa15801561240b573d6000803e3d6000fd5b505050506040513d602081101561242157600080fd5b81019080805190602001909291905050509050612450565b60009050612450565b61244d600a8361339e565b90505b919050565b6000600b60009054906101000a900460ff16151561247257600080fd5b61247d338484612e6e565b6001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156124e257600080fd5b80600d60146101000a81548160ff02191690831515021790555050565b600b60009054906101000a900460ff1681565b60065481565b600080600c805490501480612577575081600c600081548110151561253957fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b156126b957600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156126b057600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c6d1d23d61261e84600654613385565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561266e57600080fd5b505afa158015612682573d6000803e3d6000fd5b505050506040513d602081101561269857600080fd5b810190808051906020019092919050505090506126c7565b600090506126c7565b6126c4600c8361339e565b90505b919050565b60006126d884846110e8565b15156126e357600080fd5b8373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156127d85780820151818401526020810190506127bd565b50505050905090810190601f1680156128055780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561282757600080fd5b505af115801561283b573d6000803e3d6000fd5b50505050600190509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128a757600080fd5b60006128b16113ff565b90508281101515156128c257600080fd5b60006128cd85612069565b90508381101515156128de57600080fd5b6128eb600a858403613210565b612935600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020858303613210565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612a8957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612b42576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015612b3c573d6000803e3d6000fd5b50612da8565b600081905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612be257600080fd5b505afa158015612bf6573d6000803e3d6000fd5b505050506040513d6020811015612c0c57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612ce357600080fd5b505af1158015612cf7573d6000803e3d6000fd5b505050506040513d6020811015612d0d57600080fd5b8101908080519060200190929190505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c836040518082815260200191505060405180910390a350505b50565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e2c57600080fd5b80600b60006101000a81548160ff02191690831515021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000811415612ee1578173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a361320b565b43600654101515612ef157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015612f5a57503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1515612f6557600080fd5b6000612f7184436117b6565b9050818110151515612f8257600080fd5b612fac6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ff7565b156130f0576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a3931498585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156130a957600080fd5b505af11580156130bd573d6000803e3d6000fd5b505050506040513d60208110156130d357600080fd5b810190808051906020019092919050505015156130ef57600080fd5b5b61313a600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838303613210565b600061314684436117b6565b9050808382011015151561315957600080fd5b6131a3600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848301613210565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a350505b505050565b60008280549050148061327257504382600184805490500381548110151561323457fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16105b156133215760008283805480919060010161328d91906135ad565b81548110151561329957fe5b906000526020600020019050438160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550818160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050613381565b600082600184805490500381548110151561333857fe5b906000526020600020019050818160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550505b5050565b60008183106133945781613396565b825b905092915050565b600080838054905014156133b557600090506135a7565b8260018480549050038154811015156133ca57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16821015156134665782600184805490500381548110151561342357fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1690506135a7565b82600081548110151561347557fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168210156134c157600090506135a7565b60008090506000600185805490500390505b8181111561355857600060026001848401018115156134ee57fe5b04905084868281548110151561350057fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1611151561354b57809250613552565b6001810391505b506134d3565b848281548110151561356657fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16925050505b92915050565b8154818355818111156135d4578183600052602060002091820191016135d391906135d9565b5b505050565b61363b91905b8082111561363757600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff0219169055506001016135df565b5090565b9056fea165627a7a72305820f40cf4658615fc5a5af9257a6debed8b30a981f06e6762263321fb6aada9f7a40029",
  "sourceMap": "106:1587:2:-;;;4314:33:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;139:514:2;8:9:-1;5:2;;;30:1;27;20:12;5:2;139:514:2;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;139:514:2;;;;;;;;;;;;;;;;;;;;;;;;;234:13;261:1;307;6876:741:1;;;;;;;;;;;;;;;;;;418:2:2;6876:741:1;;;;;;;;;;;;;;;;;;496:4:2;3418:10:1;3405;;:23;;;;;;;;;;;;;;;;;;7180:13;7146:12;;:48;;;;;;;;;;;;;;;;;;7211:10;7204:4;:17;;;;;;;;;;;;:::i;:::-;;7290:13;7279:8;;:24;;;;;;;;;;;;;;;;;;7367:12;7358:6;:21;;;;;;;;;;;;:::i;:::-;;7461:12;7435:11;;:39;;;;;;;;;;;;;;;;;;7506:20;7484:19;:42;;;;7555:17;7536:16;;:36;;;;;;;;;;;;;;;;;;7598:12;7582:13;:28;;;;6876:741;;;;;;;556:60:2;571:14;587:28;556:14;;;:60;;;:::i;:::-;;626:20;640:5;626:13;;;:20;;;:::i;:::-;139:514;;106:1587;;21100:590:1;21190:4;3319:10;;;;;;;;;;;3305:24;;:10;:24;;;3297:33;;;;;;;;21206:19;21228:13;:11;;;:13;;;:::i;:::-;21206:35;;21287:14;21276:7;21259:14;:24;:42;;21251:51;;;;;;;;21334:22;21359:17;21369:6;21359:9;;;:17;;;:::i;:::-;21334:42;;21425:17;21414:7;21394:17;:27;:48;;21386:57;;;;;;;;21475:62;21492:18;21529:7;21512:14;:24;21475:16;;;:62;;;:::i;:::-;21547:63;21564:8;:16;21573:6;21564:16;;;;;;;;;;;;;;;21602:7;21582:17;:27;21547:16;;;:63;;;:::i;:::-;21646:6;21625:37;;21642:1;21625:37;;;21654:7;21625:37;;;;;;;;;;;;;;;;;;21679:4;21672:11;;;;21100:590;;;;:::o;835:116:2:-;3319:10:1;;;;;;;;;;;3305:24;;:10;:24;;;3297:33;;;;;;;;929:15:2;912:14;;:32;;;;;;;;;;;;;;;;;;835:116;:::o;14198:101:1:-;14242:4;14265:27;14279:12;14265:13;;;:27;;;:::i;:::-;14258:34;;14198:101;:::o;11370:130::-;11426:15;11460:33;11472:6;11480:12;11460:11;;;:33;;;:::i;:::-;11453:40;;11370:130;;;:::o;24134:587::-;24259:1;24237:11;:18;;;;:23;24236:98;;;;24321:12;24274:11;24306:1;24286:11;:18;;;;:21;24274:34;;;;;;;;;;;;;;;;;:44;;;;;;;;;;;;:59;;;24236:98;24232:483;;;24353:32;24388:11;24401;:20;;;;;;;;;;;:::i;:::-;24388:35;;;;;;;;;;;;;;;;;24353:70;;24475:12;24440:13;:23;;;:48;;;;;;;;;;;;;;;;;;24535:6;24505:13;:19;;;:37;;;;;;;;;;;;;;;;;;24232:483;;;;24579:32;24614:11;24645:1;24626:11;:18;;;;:20;24614:33;;;;;;;;;;;;;;;;;24579:68;;24694:6;24664:13;:19;;;:37;;;;;;;;;;;;;;;;;;24232:483;;24134:587;;:::o;15809:915::-;15871:4;16273:1;16244:18;:25;;;;:30;16243:96;;;;16326:12;16292:18;16311:1;16292:21;;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;:46;;;16243:96;16239:479;;;16391:1;16359:34;;16367:11;;;;;;;;;;;16359:34;;;;16355:192;;;16420:11;;;;;;;;;;;:25;;;16446:38;16450:12;16464:19;;16446:3;;;:38;;;:::i;:::-;16420:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16420:65:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;16420:65:1;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;16420:65:1;;;;;;;;;;;;;;;;16413:72;;;;16355:192;16531:1;16524:8;;;;16239:479;16663:44;16674:18;16694:12;16663:10;;;:44;;;:::i;:::-;16656:51;;15809:915;;;;:::o;14653:943::-;14738:4;15114:1;15087:8;:16;15096:6;15087:16;;;;;;;;;;;;;;;:23;;;;:28;15086:92;;;;15165:12;15133:8;:16;15142:6;15133:16;;;;;;;;;;;;;;;15150:1;15133:19;;;;;;;;;;;;;;;;;:29;;;;;;;;;;;;:44;;;15086:92;15082:508;;;15230:1;15198:34;;15206:11;;;;;;;;;;;15198:34;;;;15194:231;;;15259:11;;;;;;;;;;;:23;;;15283:6;15291:38;15295:12;15309:19;;15291:3;;;:38;;;:::i;:::-;15259:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15259:71:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;15259:71:1;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15259:71:1;;;;;;;;;;;;;;;;15252:78;;;;15194:231;15409:1;15402:8;;;;15082:508;15537:42;15548:8;:16;15557:6;15548:16;;;;;;;;;;;;;;;15566:12;15537:10;;;:42;;;:::i;:::-;15530:49;;14653:943;;;;;:::o;25191:95::-;25243:4;25270:1;25266;:5;:13;;25278:1;25266:13;;;25274:1;25266:13;25259:20;;25191:95;;;;:::o;23155:761::-;23250:4;23292:1;23270:11;:18;;;;:23;23266:37;;;23302:1;23295:8;;;;23266:37;23369:11;23400:1;23381:11;:18;;;;:20;23369:33;;;;;;;;;;;;;;;;;:43;;;;;;;;;;;;23359:53;;:6;:53;;23355:117;;;23433:11;23464:1;23445:11;:18;;;;:20;23433:33;;;;;;;;;;;;;;;;;:39;;;;;;;;;;;;23426:46;;;;;;23355:117;23495:11;23507:1;23495:14;;;;;;;;;;;;;;;;;:24;;;;;;;;;;;;23486:33;;:6;:33;23482:47;;;23528:1;23521:8;;;;23482:47;23591:8;23602:1;23591:12;;23613:8;23643:1;23624:11;:18;;;;:20;23613:31;;23654:217;23667:3;23661;:9;23654:217;;;23686:8;23714:1;23710;23704:3;23698;:9;:13;23697:18;;;;;;;;23686:29;;23761:6;23733:11;23745:3;23733:16;;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;:34;;;;23729:132;;;23793:3;23787:9;;23729:132;;;23845:1;23841:3;:5;23835:11;;23729:132;23654:217;;;;23887:11;23899:3;23887:16;;;;;;;;;;;;;;;;;:22;;;;;;;;;;;;23880:29;;;;;;23155:761;;;;;:::o;106:1587:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "106:1587:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25577:22:1;25588:10;;;;;;;;;;;25577;:22::i;:::-;25569:31;;;;;;;;25634:10;;;;;;;;;;;25618:40;;;25665:9;25676:10;25618:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;25618:69:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;25618:69:1;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;25618:69:1;;;;;;;;;;;;;;;;25610:78;;;;;;;;106:1587:2;4088:18:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4088:18:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4088:18:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11899:834;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11899:834:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11899:834:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5229:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5229:25:1;;;;;;;;;;;;;;;;;;;;;;;14198:101;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14198:101:1;;;;;;;;;;;;;;;;;;;;;;;8495:790;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8495:790:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8495:790:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16932:109;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16932:109:1;;;;;;;;;;;;;;;;;;;;;;;4168:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4168:21:1;;;;;;;;;;;;;;;;;;;;;;;;;;;3556:124;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3556:124:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3556:124:1;;;;;;;;;;;;;;;;;;;;;;18986:263;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18986:263:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;18986:263:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;733:26:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;733:26:2;;;;;;;;;;;;;;;;;;;;;;;;;;;14653:943:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14653:943:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14653:943:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;957:676:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;957:676:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;957:676:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18480:293:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18480:293:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;18480:293:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4314:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4314:33:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4314:33:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19986:783;;8:9:-1;5:2;;;30:1;27;20:12;5:2;19986:783:1;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;19986:783:1;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;19986:783:1;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;19986:783:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;19986:783:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;19986:783:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;19986:783:1;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;19986:783:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;19986:783:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;19986:783:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11370:130;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11370:130:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11370:130:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4928:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4928:30:1;;;;;;;;;;;;;;;;;;;;;;;;;;;21100:590;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21100:590:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;21100:590:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4249:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4249:20:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4249:20:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15809:915;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15809:915:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15809:915:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7958:187;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7958:187:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7958:187:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;835:116:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;835:116:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;835:116:2;;;;;;;;;;;;;;;;;;;;;;5808:28:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5808:28:1;;;;;;;;;;;;;;;;;;;;;;;;;;;5115:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5115:31:1;;;;;;;;;;;;;;;;;;;;;;;17259:943;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17259:943:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;17259:943:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13716:358;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13716:358:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13716:358:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;13716:358:1;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;13716:358:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;13716:358:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;13716:358:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21920:514;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21920:514:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;21920:514:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13052:147;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13052:147:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13052:147:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25995:403;;8:9:-1;5:2;;;30:1;27;20:12;5:2;25995:403:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;25995:403:1;;;;;;;;;;;;;;;;;;;;;;6021:38;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6021:38:1;;;;;;;;;;;;;;;;;;;;;;;;;;;22657:124;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22657:124:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22657:124:1;;;;;;;;;;;;;;;;;;;;;;3342:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3342:33:1;;;;;;;;;;;;;;;;;;;;;;;;;;;24892:227;24949:4;24965:9;25005:1;24988:19;;:5;:19;;;24984:37;;;25016:5;25009:12;;;;;24984:37;25074:5;25062:18;25054:26;;25111:1;25106:4;:6;25099:13;;;24892:227;;;;:::o;4088:18::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;11899:834::-;11967:12;11999:16;;;;;;;;;;;11991:25;;;;;;;;12350:1;12339:7;:12;12338:54;;;;12390:1;12357:7;:19;12365:10;12357:19;;;;;;;;;;;;;;;:29;12377:8;12357:29;;;;;;;;;;;;;;;;:34;12338:54;12330:63;;;;;;;;12476:22;12487:10;;;;;;;;;;;12476;:22::i;:::-;12472:130;;;12538:10;;;;;;;;;;;12522:37;;;12560:10;12572:8;12582:7;12522:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12522:68:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;12522:68:1;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12522:68:1;;;;;;;;;;;;;;;;12514:77;;;;;;;;12472:130;12644:7;12612;:19;12620:10;12612:19;;;;;;;;;;;;;;;:29;12632:8;12612:29;;;;;;;;;;;;;;;:39;;;;12687:8;12666:39;;12675:10;12666:39;;;12697:7;12666:39;;;;;;;;;;;;;;;;;;12722:4;12715:11;;11899:834;;;;:::o;5229:25::-;;;;:::o;14198:101::-;14242:4;14265:27;14279:12;14265:13;:27::i;:::-;14258:34;;14198:101;:::o;8495:790::-;8583:12;8902:10;;;;;;;;;;;8888:24;;:10;:24;;;;8884:333;;;8936:16;;;;;;;;;;;8928:25;;;;;;;;7707:10;9034:7;:14;9042:5;9034:14;;;;;;;;;;;;;;;:26;9049:10;9034:26;;;;;;;;;;;;;;;;:37;9030:177;;;9129:7;9099;:14;9107:5;9099:14;;;;;;;;;;;;;;;:26;9114:10;9099:26;;;;;;;;;;;;;;;;:37;;9091:46;;;;;;;;9185:7;9155;:14;9163:5;9155:14;;;;;;;;;;;;;;;:26;9170:10;9155:26;;;;;;;;;;;;;;;;:37;;;;;;;;;;;9030:177;8884:333;9226:31;9237:5;9244:3;9249:7;9226:10;:31::i;:::-;9274:4;9267:11;;8495:790;;;;;:::o;16932:109::-;16981:4;17003:32;17022:12;17003:18;:32::i;:::-;16996:39;;16932:109;:::o;4168:21::-;;;;;;;;;;;;;:::o;3556:124::-;3319:10;;;;;;;;;;;3305:24;;:10;:24;;;3297:33;;;;;;;;3659:14;3646:10;;:27;;;;;;;;;;;;;;;;;;3556:124;:::o;18986:263::-;19057:4;3319:10;;;;;;;;;;;3305:24;;:10;:24;;;3297:33;;;;;;;;19072:17;19092:18;:16;:18::i;:::-;19072:38;;19143:6;19127:12;:22;;19119:31;;;;;;;;19159:64;19176:23;19216:6;19201:12;:21;19159:16;:64::i;:::-;19239:4;19232:11;;;18986:263;;;:::o;733:26:2:-;;;;;;;;;;;;;:::o;14653:943:1:-;14738:4;15114:1;15087:8;:16;15096:6;15087:16;;;;;;;;;;;;;;;:23;;;;:28;15086:92;;;;15165:12;15133:8;:16;15142:6;15133:16;;;;;;;;;;;;;;;15150:1;15133:19;;;;;;;;;;;;;;;;;:29;;;;;;;;;;;;:44;;;15086:92;15082:508;;;15230:1;15198:34;;15206:11;;;;;;;;;;;15198:34;;;;15194:231;;;15259:11;;;;;;;;;;;:23;;;15283:6;15291:38;15295:12;15309:19;;15291:3;:38::i;:::-;15259:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15259:71:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;15259:71:1;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15259:71:1;;;;;;;;;;;;;;;;15252:78;;;;15194:231;15409:1;15402:8;;;;15082:508;15537:42;15548:8;:16;15557:6;15548:16;;;;;;;;;;;;;;;15566:12;15537:10;:42::i;:::-;15530:49;;14653:943;;;;;:::o;957:676:2:-;1021:12;1053:14;;;;;;;;;;;1045:23;;;;;;;;1079:27;1109:37;1121:10;1133:12;1109:11;:37::i;:::-;1079:67;;1182:13;1160:19;:35;1156:78;;;1218:5;1211:12;;;;;1156:78;1438:22;1449:10;;;;;;;;;;;1438;:22::i;:::-;1434:123;;;1500:10;;;;;;;;;;;1484:34;;;1519:10;1531:13;1484:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1484:61:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1484:61:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1484:61:2;;;;;;;;;;;;;;;;1476:70;;;;;;;;1434:123;1579:10;1572:33;;;1591:13;1572:33;;;;;;;;;;;;;;;;;;1622:4;1615:11;;;957:676;;;;:::o;18480:293:1:-;18544:4;3319:10;;;;;;;;;;;3305:24;;:10;:24;;;3297:33;;;;;;;;18559:17;18579:18;:16;:18::i;:::-;18559:38;;18639:12;18629:6;18614:12;:21;:37;;18606:46;;;;;;;;18683:64;18700:23;18740:6;18725:12;:21;18683:16;:64::i;:::-;18763:4;18756:11;;;18480:293;;;:::o;4314:33::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;19986:783::-;20212:7;20253:1;20235:14;:19;20231:54;;;20273:12;20256:29;;20231:54;20295:22;20320:12;;;;;;;;;;;:29;;;20371:4;20390:14;20418:15;20447:18;20479:17;20510;20320:221;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;20320:221:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;20320:221:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;20320:221:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;20320:221:1;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;20320:221:1;;;;;;;;;;;;;;;;20295:246;;20552:10;:27;;;20580:10;20552:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;20552:39:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;20552:39:1;;;;20698:10;20676:50;;;20711:14;20676:50;;;;;;;;;;;;;;;;;;20751:10;20736:26;;;19986:783;;;;;;;:::o;11370:130::-;11426:15;11460:33;11472:6;11480:12;11460:11;:33::i;:::-;11453:40;;11370:130;;;:::o;4928:30::-;;;;;;;;;;;;;:::o;21100:590::-;21190:4;3319:10;;;;;;;;;;;3305:24;;:10;:24;;;3297:33;;;;;;;;21206:19;21228:13;:11;:13::i;:::-;21206:35;;21287:14;21276:7;21259:14;:24;:42;;21251:51;;;;;;;;21334:22;21359:17;21369:6;21359:9;:17::i;:::-;21334:42;;21425:17;21414:7;21394:17;:27;:48;;21386:57;;;;;;;;21475:62;21492:18;21529:7;21512:14;:24;21475:16;:62::i;:::-;21547:63;21564:8;:16;21573:6;21564:16;;;;;;;;;;;;;;;21602:7;21582:17;:27;21547:16;:63::i;:::-;21646:6;21625:37;;21642:1;21625:37;;;21654:7;21625:37;;;;;;;;;;;;;;;;;;21679:4;21672:11;;;;21100:590;;;;:::o;4249:20::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;15809:915::-;15871:4;16273:1;16244:18;:25;;;;:30;16243:96;;;;16326:12;16292:18;16311:1;16292:21;;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;:46;;;16243:96;16239:479;;;16391:1;16359:34;;16367:11;;;;;;;;;;;16359:34;;;;16355:192;;;16420:11;;;;;;;;;;;:25;;;16446:38;16450:12;16464:19;;16446:3;:38::i;:::-;16420:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16420:65:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;16420:65:1;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;16420:65:1;;;;;;;;;;;;;;;;16413:72;;;;16355:192;16531:1;16524:8;;;;16239:479;16663:44;16674:18;16694:12;16663:10;:44::i;:::-;16656:51;;15809:915;;;;:::o;7958:187::-;8022:12;8054:16;;;;;;;;;;;8046:25;;;;;;;;8081:36;8092:10;8104:3;8109:7;8081:10;:36::i;:::-;8134:4;8127:11;;7958:187;;;;:::o;835:116:2:-;3319:10:1;;;;;;;;;;;3305:24;;:10;:24;;;3297:33;;;;;;;;929:15:2;912:14;;:32;;;;;;;;;;;;;;;;;;835:116;:::o;5808:28:1:-;;;;;;;;;;;;;:::o;5115:31::-;;;;:::o;17259:943::-;17326:4;17742:1;17708:23;:30;;;;:35;17707:105;;;;17799:12;17760:23;17784:1;17760:26;;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;:51;;;17707:105;17703:494;;;17863:1;17831:34;;17839:11;;;;;;;;;;;17831:34;;;;17827:193;;;17891:11;;;;;;;;;;;:30;;;17922:38;17926:12;17940:19;;17922:3;:38::i;:::-;17891:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17891:70:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;17891:70:1;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;17891:70:1;;;;;;;;;;;;;;;;17884:77;;;;17827:193;18005:1;17998:8;;;;17703:494;18138:49;18149:23;18174:12;18138:10;:49::i;:::-;18131:56;;17259:943;;;;:::o;13716:358::-;13821:12;13853:26;13861:8;13871:7;13853;:26::i;:::-;13845:35;;;;;;;;13914:8;13891:48;;;13953:10;13977:7;14006:4;14025:10;13891:154;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;13891:154:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13891:154:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13891:154:1;;;;14063:4;14056:11;;13716:358;;;;;:::o;21920:514::-;22009:4;3319:10;;;;;;;;;;;3305:24;;:10;:24;;;3297:33;;;;;;;;22025:19;22047:13;:11;:13::i;:::-;22025:35;;22096:7;22078:14;:25;;22070:34;;;;;;;;22114:24;22141:17;22151:6;22141:9;:17::i;:::-;22114:44;;22199:7;22176:19;:30;;22168:39;;;;;;;;22217:62;22234:18;22271:7;22254:14;:24;22217:16;:62::i;:::-;22289:65;22306:8;:16;22315:6;22306:16;;;;;;;;;;;;;;;22346:7;22324:19;:29;22289:16;:65::i;:::-;22394:1;22369:37;;22378:6;22369:37;;;22398:7;22369:37;;;;;;;;;;;;;;;;;;22423:4;22416:11;;;;21920:514;;;;:::o;13052:147::-;13131:17;13167:7;:15;13175:6;13167:15;;;;;;;;;;;;;;;:25;13183:8;13167:25;;;;;;;;;;;;;;;;13160:32;;13052:147;;;;:::o;25995:403::-;3319:10;;;;;;;;;;;3305:24;;:10;:24;;;3297:33;;;;;;;;26094:1;26076:20;;:6;:20;;;26072:113;;;26112:10;;;;;;;;;;;:19;;:42;26140:4;26132:21;;;26112:42;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;26112:42:1;26168:7;;26072:113;26195:17;26227:6;26195:39;;26244:12;26259:5;:15;;;26283:4;26259:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26259:30:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;26259:30:1;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;26259:30:1;;;;;;;;;;;;;;;;26244:45;;26299:5;:14;;;26314:10;;;;;;;;;;;26326:7;26299:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26299:35:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;26299:35:1;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;26299:35:1;;;;;;;;;;;;;;;;;26371:10;;;;;;;;;;;26349:42;;26363:6;26349:42;;;26383:7;26349:42;;;;;;;;;;;;;;;;;;3332:1;;;25995:403;:::o;6021:38::-;;;;;;;;;;;;;:::o;22657:124::-;3319:10;;;;;;;;;;;3305:24;;:10;:24;;;3297:33;;;;;;;;22757:17;22738:16;;:36;;;;;;;;;;;;;;;;;;22657:124;:::o;3342:33::-;;;;;;;;;;;;;:::o;9664:1571::-;9769:1;9758:7;:12;9754:163;;;9810:3;9794:29;;9803:5;9794:29;;;9815:7;9794:29;;;;;;;;;;;;;;;;;;9897:7;;9754:163;9960:12;9938:19;;:34;9930:43;;;;;;;;10083:1;10068:17;;:3;:17;;;;10067:45;;;;;10106:4;10091:20;;:3;:20;;;;10067:45;10059:54;;;;;;;;10247:27;10277:32;10289:5;10296:12;10277:11;:32::i;:::-;10247:62;;10354:7;10331:19;:30;;10323:39;;;;;;;;10438:22;10449:10;;;;;;;;;;;10438;:22::i;:::-;10434:127;;;10503:10;;;;;;;;;;;10487:38;;;10526:5;10533:3;10538:7;10487:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10487:59:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10487:59:1;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10487:59:1;;;;;;;;;;;;;;;;10479:68;;;;;;;;10434:127;10688:64;10705:8;:15;10714:5;10705:15;;;;;;;;;;;;;;;10744:7;10722:19;:29;10688:16;:64::i;:::-;10881:25;10909:30;10921:3;10926:12;10909:11;:30::i;:::-;10881:58;;10991:17;10980:7;10960:17;:27;:48;;10952:57;;;;;;;;11044:60;11061:8;:13;11070:3;11061:13;;;;;;;;;;;;;;;11096:7;11076:17;:27;11044:16;:60::i;:::-;11214:3;11198:29;;11207:5;11198:29;;;11219:7;11198:29;;;;;;;;;;;;;;;;;;9664:1571;;;;;;:::o;24134:587::-;24259:1;24237:11;:18;;;;:23;24236:98;;;;24321:12;24274:11;24306:1;24286:11;:18;;;;:21;24274:34;;;;;;;;;;;;;;;;;:44;;;;;;;;;;;;:59;;;24236:98;24232:483;;;24353:32;24388:11;24401;:20;;;;;;;;;;;:::i;:::-;24388:35;;;;;;;;;;;;;;;;;24353:70;;24475:12;24440:13;:23;;;:48;;;;;;;;;;;;;;;;;;24535:6;24505:13;:19;;;:37;;;;;;;;;;;;;;;;;;24232:483;;;;24579:32;24614:11;24645:1;24626:11;:18;;;;:20;24614:33;;;;;;;;;;;;;;;;;24579:68;;24694:6;24664:13;:19;;;:37;;;;;;;;;;;;;;;;;;24232:483;;24134:587;;:::o;25191:95::-;25243:4;25270:1;25266;:5;:13;;25278:1;25266:13;;;25274:1;25266:13;25259:20;;25191:95;;;;:::o;23155:761::-;23250:4;23292:1;23270:11;:18;;;;:23;23266:37;;;23302:1;23295:8;;;;23266:37;23369:11;23400:1;23381:11;:18;;;;:20;23369:33;;;;;;;;;;;;;;;;;:43;;;;;;;;;;;;23359:53;;:6;:53;;23355:117;;;23433:11;23464:1;23445:11;:18;;;;:20;23433:33;;;;;;;;;;;;;;;;;:39;;;;;;;;;;;;23426:46;;;;;;23355:117;23495:11;23507:1;23495:14;;;;;;;;;;;;;;;;;:24;;;;;;;;;;;;23486:33;;:6;:33;23482:47;;;23528:1;23521:8;;;;23482:47;23591:8;23602:1;23591:12;;23613:8;23643:1;23624:11;:18;;;;:20;23613:31;;23654:217;23667:3;23661;:9;23654:217;;;23686:8;23714:1;23710;23704:3;23698;:9;:13;23697:18;;;;;;;;23686:29;;23761:6;23733:11;23745:3;23733:16;;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;:34;;;;23729:132;;;23793:3;23787:9;;23729:132;;;23845:1;23841:3;:5;23835:11;;23729:132;23654:217;;;;23887:11;23899:3;23887:16;;;;;;;;;;;;;;;;;:22;;;;;;;;;;;;23880:29;;;;;;23155:761;;;;;:::o;106:1587:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./MiniMeToken.sol\";\n\n/*\n    Copyright 2017, Will Harborne (Ethfinex)\n*/\n\ncontract NEC is MiniMeToken {\n\n  constructor(\n    address _tokenFactory,\n    address efxVaultWallet\n  ) public MiniMeToken(\n    _tokenFactory,\n    address(0),                    // no parent token\n    0,                      // no snapshot block number from parent\n    \"Ethfinex Nectar Token\", // Token name\n    18,                     // Decimals\n    \"NEC\",                  // Symbol\n    true                    // Enable transfers\n    ) {\n        generateTokens(efxVaultWallet, 1000000000000000000000000000);\n        enableBurning(false);\n    }\n\n    // Flag that determines if the token can be burned for rewards or not\n    bool public burningEnabled;\n\n\n////////////////\n// Enable token burning by users\n////////////////\n\n    function enableBurning(bool _burningEnabled) public onlyController {\n        burningEnabled = _burningEnabled;\n    }\n\n    function burnAndRetrieve(uint256 _tokensToBurn) public returns (bool success) {\n        require(burningEnabled);\n\n        uint256 previousBalanceFrom = balanceOfAt(msg.sender, block.number);\n        if (previousBalanceFrom < _tokensToBurn) {\n            return false;\n        }\n\n        // Alerts the token controller of the burn function call\n        // If enabled, controller will distribute fees and destroy tokens\n        // Or any other logic chosen by controller\n        if (isContract(controller)) {\n            require(TokenController(controller).onBurn(msg.sender, _tokensToBurn));\n        }\n\n        emit Burned(msg.sender, _tokensToBurn);\n        return true;\n    }\n\n    event Burned(address indexed who, uint256 _amount);\n\n}\n",
  "sourcePath": "/Users/willharborne/Desktop/EFX/repos/nec-controller/contracts/NEC.sol",
  "ast": {
    "absolutePath": "/Users/willharborne/Desktop/EFX/repos/nec-controller/contracts/NEC.sol",
    "exportedSymbols": {
      "NEC": [
        1477
      ]
    },
    "id": 1478,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1373,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:2"
      },
      {
        "absolutePath": "/Users/willharborne/Desktop/EFX/repos/nec-controller/contracts/MiniMeToken.sol",
        "file": "./MiniMeToken.sol",
        "id": 1374,
        "nodeType": "ImportDirective",
        "scope": 1478,
        "sourceUnit": 1372,
        "src": "25:27:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1375,
              "name": "MiniMeToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1328,
              "src": "122:11:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MiniMeToken_$1328",
                "typeString": "contract MiniMeToken"
              }
            },
            "id": 1376,
            "nodeType": "InheritanceSpecifier",
            "src": "122:11:2"
          }
        ],
        "contractDependencies": [
          132,
          1328
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1477,
        "linearizedBaseContracts": [
          1477,
          1328,
          132
        ],
        "name": "NEC",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1403,
              "nodeType": "Block",
              "src": "546:107:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1395,
                        "name": "efxVaultWallet",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1380,
                        "src": "571:14:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "31303030303030303030303030303030303030303030303030303030",
                        "id": 1396,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "587:28:2",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000000000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000000000000"
                        },
                        "value": "1000000000000000000000000000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_1000000000000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000000000000"
                        }
                      ],
                      "id": 1394,
                      "name": "generateTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 939,
                      "src": "556:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) returns (bool)"
                      }
                    },
                    "id": 1397,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "556:60:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1398,
                  "nodeType": "ExpressionStatement",
                  "src": "556:60:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "66616c7365",
                        "id": 1400,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "640:5:2",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1399,
                      "name": "enableBurning",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1418,
                      "src": "626:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bool_$returns$__$",
                        "typeString": "function (bool)"
                      }
                    },
                    "id": 1401,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "626:20:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1402,
                  "nodeType": "ExpressionStatement",
                  "src": "626:20:2"
                }
              ]
            },
            "documentation": null,
            "id": 1404,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1383,
                    "name": "_tokenFactory",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1378,
                    "src": "234:13:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "30",
                        "id": 1385,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "261:1:2",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        }
                      ],
                      "id": 1384,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "253:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": "address"
                    },
                    "id": 1386,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "253:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "30",
                    "id": 1387,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "307:1:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "45746866696e6578204e656374617220546f6b656e",
                    "id": 1388,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "375:23:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_3bfcbc2b0667ef28059d464abc1809f66b493a4f8d58e6d16d874223c0f6376c",
                      "typeString": "literal_string \"Ethfinex Nectar Token\""
                    },
                    "value": "Ethfinex Nectar Token"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "3138",
                    "id": 1389,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "418:2:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_18_by_1",
                      "typeString": "int_const 18"
                    },
                    "value": "18"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "4e4543",
                    "id": 1390,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "458:5:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_8494418eb851b795a38dfa5697048e26e5356c4518711fa2ff542406f675b4f2",
                      "typeString": "literal_string \"NEC\""
                    },
                    "value": "NEC"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 1391,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "496:4:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  }
                ],
                "id": 1392,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1382,
                  "name": "MiniMeToken",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1328,
                  "src": "217:11:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_MiniMeToken_$1328_$",
                    "typeString": "type(contract MiniMeToken)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "217:328:2"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1381,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1378,
                  "name": "_tokenFactory",
                  "nodeType": "VariableDeclaration",
                  "scope": 1404,
                  "src": "156:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1377,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "156:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1380,
                  "name": "efxVaultWallet",
                  "nodeType": "VariableDeclaration",
                  "scope": 1404,
                  "src": "183:22:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1379,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "183:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "150:59:2"
            },
            "returnParameters": {
              "id": 1393,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "546:0:2"
            },
            "scope": 1477,
            "src": "139:514:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 1406,
            "name": "burningEnabled",
            "nodeType": "VariableDeclaration",
            "scope": 1477,
            "src": "733:26:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1405,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "733:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1417,
              "nodeType": "Block",
              "src": "902:49:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1415,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1413,
                      "name": "burningEnabled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1406,
                      "src": "912:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1414,
                      "name": "_burningEnabled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1408,
                      "src": "929:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "912:32:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1416,
                  "nodeType": "ExpressionStatement",
                  "src": "912:32:2"
                }
              ]
            },
            "documentation": "/////////////",
            "id": 1418,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 1411,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1410,
                  "name": "onlyController",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 108,
                  "src": "887:14:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "887:14:2"
              }
            ],
            "name": "enableBurning",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1409,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1408,
                  "name": "_burningEnabled",
                  "nodeType": "VariableDeclaration",
                  "scope": 1418,
                  "src": "858:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1407,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "858:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "857:22:2"
            },
            "returnParameters": {
              "id": 1412,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "902:0:2"
            },
            "scope": 1477,
            "src": "835:116:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1469,
              "nodeType": "Block",
              "src": "1035:598:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1426,
                        "name": "burningEnabled",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1406,
                        "src": "1053:14:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1425,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        2207,
                        2208
                      ],
                      "referencedDeclaration": 2207,
                      "src": "1045:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1427,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1045:23:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1428,
                  "nodeType": "ExpressionStatement",
                  "src": "1045:23:2"
                },
                {
                  "assignments": [
                    1430
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1430,
                      "name": "previousBalanceFrom",
                      "nodeType": "VariableDeclaration",
                      "scope": 1469,
                      "src": "1079:27:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1429,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1079:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1437,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1432,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2204,
                          "src": "1121:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1433,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1121:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1434,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2194,
                          "src": "1133:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 1435,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "number",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1133:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1431,
                      "name": "balanceOfAt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 646,
                      "src": "1109:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (address,uint256) view returns (uint256)"
                      }
                    },
                    "id": 1436,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1109:37:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1079:67:2"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1440,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 1438,
                      "name": "previousBalanceFrom",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1430,
                      "src": "1160:19:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "argumentTypes": null,
                      "id": 1439,
                      "name": "_tokensToBurn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1420,
                      "src": "1182:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1160:35:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 1444,
                  "nodeType": "IfStatement",
                  "src": "1156:78:2",
                  "trueBody": {
                    "id": 1443,
                    "nodeType": "Block",
                    "src": "1197:37:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "66616c7365",
                          "id": 1441,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1218:5:2",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "functionReturnParameters": 1424,
                        "id": 1442,
                        "nodeType": "Return",
                        "src": "1211:12:2"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1446,
                        "name": "controller",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 110,
                        "src": "1449:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 1445,
                      "name": "isContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1203,
                      "src": "1438:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                        "typeString": "function (address) view returns (bool)"
                      }
                    },
                    "id": 1447,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1438:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 1460,
                  "nodeType": "IfStatement",
                  "src": "1434:123:2",
                  "trueBody": {
                    "id": 1459,
                    "nodeType": "Block",
                    "src": "1462:95:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1453,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2204,
                                    "src": "1519:3:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 1454,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "1519:10:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1455,
                                  "name": "_tokensToBurn",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1420,
                                  "src": "1531:13:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 1450,
                                      "name": "controller",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 110,
                                      "src": "1500:10:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    ],
                                    "id": 1449,
                                    "name": "TokenController",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 97,
                                    "src": "1484:15:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_TokenController_$97_$",
                                      "typeString": "type(contract TokenController)"
                                    }
                                  },
                                  "id": 1451,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1484:27:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_TokenController_$97",
                                    "typeString": "contract TokenController"
                                  }
                                },
                                "id": 1452,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "onBurn",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 96,
                                "src": "1484:34:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (address,uint256) external returns (bool)"
                                }
                              },
                              "id": 1456,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1484:61:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1448,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              2207,
                              2208
                            ],
                            "referencedDeclaration": 2207,
                            "src": "1476:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1457,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1476:70:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1458,
                        "nodeType": "ExpressionStatement",
                        "src": "1476:70:2"
                      }
                    ]
                  }
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1462,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2204,
                          "src": "1579:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1463,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1579:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1464,
                        "name": "_tokensToBurn",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1420,
                        "src": "1591:13:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1461,
                      "name": "Burned",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1476,
                      "src": "1572:6:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1465,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1572:33:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1466,
                  "nodeType": "EmitStatement",
                  "src": "1567:38:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 1467,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1622:4:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 1424,
                  "id": 1468,
                  "nodeType": "Return",
                  "src": "1615:11:2"
                }
              ]
            },
            "documentation": null,
            "id": 1470,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burnAndRetrieve",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1421,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1420,
                  "name": "_tokensToBurn",
                  "nodeType": "VariableDeclaration",
                  "scope": 1470,
                  "src": "982:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1419,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "982:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "981:23:2"
            },
            "returnParameters": {
              "id": 1424,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1423,
                  "name": "success",
                  "nodeType": "VariableDeclaration",
                  "scope": 1470,
                  "src": "1021:12:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1422,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1021:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1020:14:2"
            },
            "scope": 1477,
            "src": "957:676:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 1476,
            "name": "Burned",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1475,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1472,
                  "indexed": true,
                  "name": "who",
                  "nodeType": "VariableDeclaration",
                  "scope": 1476,
                  "src": "1652:19:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1471,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1652:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1474,
                  "indexed": false,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1476,
                  "src": "1673:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1473,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1673:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1651:38:2"
            },
            "src": "1639:51:2"
          }
        ],
        "scope": 1478,
        "src": "106:1587:2"
      }
    ],
    "src": "0:1694:2"
  },
  "legacyAST": {
    "absolutePath": "/Users/willharborne/Desktop/EFX/repos/nec-controller/contracts/NEC.sol",
    "exportedSymbols": {
      "NEC": [
        1477
      ]
    },
    "id": 1478,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1373,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:2"
      },
      {
        "absolutePath": "/Users/willharborne/Desktop/EFX/repos/nec-controller/contracts/MiniMeToken.sol",
        "file": "./MiniMeToken.sol",
        "id": 1374,
        "nodeType": "ImportDirective",
        "scope": 1478,
        "sourceUnit": 1372,
        "src": "25:27:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1375,
              "name": "MiniMeToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1328,
              "src": "122:11:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MiniMeToken_$1328",
                "typeString": "contract MiniMeToken"
              }
            },
            "id": 1376,
            "nodeType": "InheritanceSpecifier",
            "src": "122:11:2"
          }
        ],
        "contractDependencies": [
          132,
          1328
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1477,
        "linearizedBaseContracts": [
          1477,
          1328,
          132
        ],
        "name": "NEC",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1403,
              "nodeType": "Block",
              "src": "546:107:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1395,
                        "name": "efxVaultWallet",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1380,
                        "src": "571:14:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "31303030303030303030303030303030303030303030303030303030",
                        "id": 1396,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "587:28:2",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000000000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000000000000"
                        },
                        "value": "1000000000000000000000000000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_1000000000000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000000000000"
                        }
                      ],
                      "id": 1394,
                      "name": "generateTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 939,
                      "src": "556:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) returns (bool)"
                      }
                    },
                    "id": 1397,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "556:60:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1398,
                  "nodeType": "ExpressionStatement",
                  "src": "556:60:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "66616c7365",
                        "id": 1400,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "640:5:2",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1399,
                      "name": "enableBurning",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1418,
                      "src": "626:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bool_$returns$__$",
                        "typeString": "function (bool)"
                      }
                    },
                    "id": 1401,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "626:20:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1402,
                  "nodeType": "ExpressionStatement",
                  "src": "626:20:2"
                }
              ]
            },
            "documentation": null,
            "id": 1404,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1383,
                    "name": "_tokenFactory",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1378,
                    "src": "234:13:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "30",
                        "id": 1385,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "261:1:2",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        }
                      ],
                      "id": 1384,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "253:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": "address"
                    },
                    "id": 1386,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "253:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "30",
                    "id": 1387,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "307:1:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "45746866696e6578204e656374617220546f6b656e",
                    "id": 1388,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "375:23:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_3bfcbc2b0667ef28059d464abc1809f66b493a4f8d58e6d16d874223c0f6376c",
                      "typeString": "literal_string \"Ethfinex Nectar Token\""
                    },
                    "value": "Ethfinex Nectar Token"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "3138",
                    "id": 1389,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "418:2:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_18_by_1",
                      "typeString": "int_const 18"
                    },
                    "value": "18"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "4e4543",
                    "id": 1390,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "458:5:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_8494418eb851b795a38dfa5697048e26e5356c4518711fa2ff542406f675b4f2",
                      "typeString": "literal_string \"NEC\""
                    },
                    "value": "NEC"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 1391,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "496:4:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  }
                ],
                "id": 1392,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1382,
                  "name": "MiniMeToken",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1328,
                  "src": "217:11:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_MiniMeToken_$1328_$",
                    "typeString": "type(contract MiniMeToken)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "217:328:2"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1381,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1378,
                  "name": "_tokenFactory",
                  "nodeType": "VariableDeclaration",
                  "scope": 1404,
                  "src": "156:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1377,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "156:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1380,
                  "name": "efxVaultWallet",
                  "nodeType": "VariableDeclaration",
                  "scope": 1404,
                  "src": "183:22:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1379,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "183:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "150:59:2"
            },
            "returnParameters": {
              "id": 1393,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "546:0:2"
            },
            "scope": 1477,
            "src": "139:514:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 1406,
            "name": "burningEnabled",
            "nodeType": "VariableDeclaration",
            "scope": 1477,
            "src": "733:26:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1405,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "733:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1417,
              "nodeType": "Block",
              "src": "902:49:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1415,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1413,
                      "name": "burningEnabled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1406,
                      "src": "912:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1414,
                      "name": "_burningEnabled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1408,
                      "src": "929:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "912:32:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1416,
                  "nodeType": "ExpressionStatement",
                  "src": "912:32:2"
                }
              ]
            },
            "documentation": "/////////////",
            "id": 1418,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 1411,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1410,
                  "name": "onlyController",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 108,
                  "src": "887:14:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "887:14:2"
              }
            ],
            "name": "enableBurning",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1409,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1408,
                  "name": "_burningEnabled",
                  "nodeType": "VariableDeclaration",
                  "scope": 1418,
                  "src": "858:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1407,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "858:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "857:22:2"
            },
            "returnParameters": {
              "id": 1412,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "902:0:2"
            },
            "scope": 1477,
            "src": "835:116:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1469,
              "nodeType": "Block",
              "src": "1035:598:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1426,
                        "name": "burningEnabled",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1406,
                        "src": "1053:14:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1425,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        2207,
                        2208
                      ],
                      "referencedDeclaration": 2207,
                      "src": "1045:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1427,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1045:23:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1428,
                  "nodeType": "ExpressionStatement",
                  "src": "1045:23:2"
                },
                {
                  "assignments": [
                    1430
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1430,
                      "name": "previousBalanceFrom",
                      "nodeType": "VariableDeclaration",
                      "scope": 1469,
                      "src": "1079:27:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1429,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1079:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1437,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1432,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2204,
                          "src": "1121:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1433,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1121:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1434,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2194,
                          "src": "1133:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 1435,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "number",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1133:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1431,
                      "name": "balanceOfAt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 646,
                      "src": "1109:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (address,uint256) view returns (uint256)"
                      }
                    },
                    "id": 1436,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1109:37:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1079:67:2"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1440,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 1438,
                      "name": "previousBalanceFrom",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1430,
                      "src": "1160:19:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "argumentTypes": null,
                      "id": 1439,
                      "name": "_tokensToBurn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1420,
                      "src": "1182:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1160:35:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 1444,
                  "nodeType": "IfStatement",
                  "src": "1156:78:2",
                  "trueBody": {
                    "id": 1443,
                    "nodeType": "Block",
                    "src": "1197:37:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "66616c7365",
                          "id": 1441,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1218:5:2",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "functionReturnParameters": 1424,
                        "id": 1442,
                        "nodeType": "Return",
                        "src": "1211:12:2"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1446,
                        "name": "controller",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 110,
                        "src": "1449:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 1445,
                      "name": "isContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1203,
                      "src": "1438:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                        "typeString": "function (address) view returns (bool)"
                      }
                    },
                    "id": 1447,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1438:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 1460,
                  "nodeType": "IfStatement",
                  "src": "1434:123:2",
                  "trueBody": {
                    "id": 1459,
                    "nodeType": "Block",
                    "src": "1462:95:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1453,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2204,
                                    "src": "1519:3:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 1454,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "1519:10:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1455,
                                  "name": "_tokensToBurn",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1420,
                                  "src": "1531:13:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 1450,
                                      "name": "controller",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 110,
                                      "src": "1500:10:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    ],
                                    "id": 1449,
                                    "name": "TokenController",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 97,
                                    "src": "1484:15:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_TokenController_$97_$",
                                      "typeString": "type(contract TokenController)"
                                    }
                                  },
                                  "id": 1451,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1484:27:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_TokenController_$97",
                                    "typeString": "contract TokenController"
                                  }
                                },
                                "id": 1452,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "onBurn",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 96,
                                "src": "1484:34:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (address,uint256) external returns (bool)"
                                }
                              },
                              "id": 1456,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1484:61:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1448,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              2207,
                              2208
                            ],
                            "referencedDeclaration": 2207,
                            "src": "1476:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1457,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1476:70:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1458,
                        "nodeType": "ExpressionStatement",
                        "src": "1476:70:2"
                      }
                    ]
                  }
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1462,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2204,
                          "src": "1579:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1463,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1579:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1464,
                        "name": "_tokensToBurn",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1420,
                        "src": "1591:13:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1461,
                      "name": "Burned",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1476,
                      "src": "1572:6:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1465,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1572:33:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1466,
                  "nodeType": "EmitStatement",
                  "src": "1567:38:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 1467,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1622:4:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 1424,
                  "id": 1468,
                  "nodeType": "Return",
                  "src": "1615:11:2"
                }
              ]
            },
            "documentation": null,
            "id": 1470,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burnAndRetrieve",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1421,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1420,
                  "name": "_tokensToBurn",
                  "nodeType": "VariableDeclaration",
                  "scope": 1470,
                  "src": "982:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1419,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "982:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "981:23:2"
            },
            "returnParameters": {
              "id": 1424,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1423,
                  "name": "success",
                  "nodeType": "VariableDeclaration",
                  "scope": 1470,
                  "src": "1021:12:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1422,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1021:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1020:14:2"
            },
            "scope": 1477,
            "src": "957:676:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 1476,
            "name": "Burned",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1475,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1472,
                  "indexed": true,
                  "name": "who",
                  "nodeType": "VariableDeclaration",
                  "scope": 1476,
                  "src": "1652:19:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1471,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1652:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1474,
                  "indexed": false,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1476,
                  "src": "1673:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1473,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1673:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1651:38:2"
            },
            "src": "1639:51:2"
          }
        ],
        "scope": 1478,
        "src": "106:1587:2"
      }
    ],
    "src": "0:1694:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.9",
  "updatedAt": "2020-01-22T10:12:29.501Z",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "details": "This function makes it easy to read the `allowed[]` map",
        "params": {
          "_owner": "The address of the account that owns the token",
          "_spender": "The address of the account able to transfer the tokens"
        },
        "return": "Amount of remaining tokens of _owner that _spender is allowed  to spend"
      },
      "approve(address,uint256)": {
        "params": {
          "_amount": "The amount of tokens to be approved for transfer",
          "_spender": "The address of the account able to transfer the tokens"
        },
        "return": "True if the approval was successful"
      },
      "approveAndCall(address,uint256,bytes)": {
        "params": {
          "_amount": "The amount of tokens to be approved for transfer",
          "_spender": "The address of the contract able to transfer the tokens"
        },
        "return": "True if the function call was successful"
      },
      "balanceOf(address)": {
        "params": {
          "_owner": "The address that's balance is being requested"
        },
        "return": "The balance of `_owner` at the current block"
      },
      "balanceOfAt(address,uint256)": {
        "details": "Queries the balance of `_owner` at a specific `_blockNumber`",
        "params": {
          "_blockNumber": "The block number when the balance is queried",
          "_owner": "The address from which the balance will be retrieved"
        },
        "return": "The balance at `_blockNumber`"
      },
      "changeController(address)": {
        "params": {
          "_newController": "The new controller of the contract"
        }
      },
      "claimTokens(address)": {
        "params": {
          "_token": "The address of the token contract that you want to recover  set to 0 in case you want to extract ether."
        }
      },
      "createCloneToken(string,uint8,string,uint256,bool)": {
        "params": {
          "_cloneDecimalUnits": "Number of decimals of the smallest unit",
          "_cloneTokenName": "Name of the clone token",
          "_cloneTokenSymbol": "Symbol of the clone token",
          "_snapshotBlock": "Block when the distribution of the parent token is  copied to set the initial distribution of the new clone token;  if the block is zero than the actual block, the current block is used",
          "_transfersEnabled": "True if transfers are allowed in the clone"
        },
        "return": "The address of the new MiniMeToken Contract"
      },
      "destroyTokens(address,uint256)": {
        "params": {
          "_amount": "The quantity of tokens to burn",
          "_owner": "The address that will lose the tokens"
        },
        "return": "True if the tokens are burned correctly"
      },
      "enableTransfers(bool)": {
        "params": {
          "_transfersEnabled": "True if transfers are allowed in the clone"
        }
      },
      "generateTokens(address,uint256)": {
        "params": {
          "_amount": "The quantity of tokens generated",
          "_owner": "The address that will be assigned the new tokens"
        },
        "return": "True if the tokens are generated correctly"
      },
      "pledgeFees(uint256)": {
        "params": {
          "_value": "The amount sent to the vault by controller, reserved for token holders"
        }
      },
      "reducePledgedFees(uint256)": {
        "params": {
          "_value": "The amount of pledged fees which are being distributed to token holders, reducing liability"
        }
      },
      "totalPledgedFees()": {
        "details": "This function makes it easy to get the total pledged fees",
        "return": "The total number of fees belonging to token holders"
      },
      "totalPledgedFeesAt(uint256)": {
        "params": {
          "_blockNumber": "The block number when the totalPledgedFees is queried"
        },
        "return": "The total amount of pledged fees at `_blockNumber`"
      },
      "totalSupply()": {
        "details": "This function makes it easy to get the total number of tokens",
        "return": "The total number of tokens"
      },
      "totalSupplyAt(uint256)": {
        "params": {
          "_blockNumber": "The block number when the totalSupply is queried"
        },
        "return": "The total amount of tokens at `_blockNumber`"
      },
      "transfer(address,uint256)": {
        "params": {
          "_amount": "The amount of tokens to be transferred",
          "_to": "The address of the recipient"
        },
        "return": "Whether the transfer was successful or not"
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "_amount": "The amount of tokens to be transferred",
          "_from": "The address holding the tokens being transferred",
          "_to": "The address of the recipient"
        },
        "return": "True if the transfer was successful"
      }
    }
  },
  "userdoc": {
    "methods": {
      "approve(address,uint256)": {
        "notice": "`msg.sender` approves `_spender` to spend `_amount` tokens on  its behalf. This is a modified version of the ERC20 approve function  to be a little bit safer"
      },
      "approveAndCall(address,uint256,bytes)": {
        "notice": "`msg.sender` approves `_spender` to send `_amount` tokens on  its behalf, and then a function is triggered in the contract that is  being approved, `_spender`. This allows users to use their tokens to  interact with contracts in one function call instead of two"
      },
      "balanceOfAt(address,uint256)": {
        "notice": "/////////////"
      },
      "changeController(address)": {
        "notice": "Changes the controller of the contract"
      },
      "claimTokens(address)": {
        "notice": "///////This method can be used by the controller to extract mistakenly  sent tokens to this contract."
      },
      "createCloneToken(string,uint8,string,uint256,bool)": {
        "notice": "/////////////Creates a new clone token with the initial distribution being  this token at `_snapshotBlock`"
      },
      "destroyTokens(address,uint256)": {
        "notice": "Burns `_amount` tokens from `_owner`"
      },
      "enableBurning(bool)": {
        "notice": "/////////////"
      },
      "enableTransfers(bool)": {
        "notice": "/////////////Enables token holders to transfer their tokens freely if true"
      },
      "generateTokens(address,uint256)": {
        "notice": "/////////////Generates `_amount` tokens that are assigned to `_owner`"
      },
      "pledgeFees(uint256)": {
        "notice": "/////////////Pledges fees to the token holders, later to be claimed by burning"
      },
      "reducePledgedFees(uint256)": {
        "notice": "Reduces pledged fees to the token holders, i.e. during upgrade or token burning"
      },
      "totalPledgedFees()": {
        "notice": "/////////////"
      },
      "totalPledgedFeesAt(uint256)": {
        "notice": "Total amount of fees at a specific `_blockNumber`."
      },
      "totalSupplyAt(uint256)": {
        "notice": "Total amount of tokens at a specific `_blockNumber`."
      },
      "transfer(address,uint256)": {
        "notice": "Send `_amount` tokens to `_to` from `msg.sender`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Send `_amount` tokens to `_to` from `_from` on the condition it  is approved by `_from`"
      }
    }
  }
}